/*
 * Automatically generated by jrpcgen 1.0.7 on 29.11.2012
 * jrpcgen is part of the "Remote Tea.Net" ONC/RPC package for C#
 * See http://remotetea.sourceforge.net for details
 */
using NFSLibrary.Protocols.Commons;
using NFSLibrary.RPC.XDR;
using NFSLibrary.RPC.OncRpc;
using System.Net;

/**
 */
namespace NFSLibrary.Protocols.V3.RPC.Mount
{
    public abstract class NFSv3MountProtocolServerStub : OncRpcServerStub, OncRpcDispatchable
    {
        public NFSv3MountProtocolServerStub()
            : this(0)
        { }

        public NFSv3MountProtocolServerStub(int port)
            : this(null, port)
        { }

        public NFSv3MountProtocolServerStub(IPAddress? bindAddr, int port)
            : base(bindAddr ?? IPAddress.Any, port)
        {
        }

        public void DispatchOperation(int procedure, XdrDecodingStream xdr, XdrEncodingStream xdr2)
        {
            switch (procedure)
            {
                case NFSv3MountProtocol.MOUNTPROC3_NULL:
                    {
                        MOUNTPROC3_NULL();
                        break;
                    }
                case NFSv3MountProtocol.MOUNTPROC3_MNT:
                    {
                        Name args = new Name();
                        args.XdrDecode(xdr);

                        MountStatus result = MOUNTPROC3_MNT(args);
                        result.XdrEncode(xdr2);
                        break;
                    }
                case NFSv3MountProtocol.MOUNTPROC3_DUMP:
                    {
                        MountList result = MOUNTPROC3_DUMP();
                        result.XdrEncode(xdr2);
                        break;
                    }
                case NFSv3MountProtocol.MOUNTPROC3_UMNT:
                    {
                        Name args = new Name();
                        args.XdrDecode(xdr);

                        MOUNTPROC3_UMNT(args);
                        break;
                    }
                case NFSv3MountProtocol.MOUNTPROC3_UMNTALL:
                    {
                        MOUNTPROC3_UMNTALL();
                        break;
                    }
                case NFSv3MountProtocol.MOUNTPROC3_EXPORT:
                    {
                        Exports result = MOUNTPROC3_EXPORT();
                        result.XdrEncode(xdr2);
                        break;
                    }
                default:
                    throw new Exception($"Unknown procedure {procedure}");
            }
        }

        public abstract void MOUNTPROC3_NULL();
        public abstract MountStatus MOUNTPROC3_MNT(Name arg1);
        public abstract MountList MOUNTPROC3_DUMP();
        public abstract void MOUNTPROC3_UMNT(Name arg1);
        public abstract void MOUNTPROC3_UMNTALL();
        public abstract Exports MOUNTPROC3_EXPORT();
    }
    // End of NFSv3MountProtocolServerStub.cs
}