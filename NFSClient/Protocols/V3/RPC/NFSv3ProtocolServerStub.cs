/*
 * Automatically generated by jrpcgen 1.0.7 on 29.11.2012
 * jrpcgen is part of the "Remote Tea.Net" ONC/RPC package for C#
 * See http://remotetea.sourceforge.net for details
 */
using NFSClient.RPC.XDR;
using System.Net;
using NFSClient.RPC.XDR.Server;
using NFSClient.RPC.OncRpc;

/**
 */
namespace NFSClient.Protocols.V3.RPC
{
    public abstract class NFSv3ProtocolServerStub : OncRpcServerStub, OncRpcDispatchable
    {
        protected readonly OncRpcServerTransportRegistrationInfo[] info;
        protected readonly OncRpcServerTransport[] transports;

        public NFSv3ProtocolServerStub()
            : this(0)
        {
        }

        public NFSv3ProtocolServerStub(int port)
            : this(null, port)
        {
        }

        public NFSv3ProtocolServerStub(IPAddress? bindAddr, int port)
            : base(bindAddr ?? IPAddress.Any, port)
        {
            info = new OncRpcServerTransportRegistrationInfo[] {
                new OncRpcServerTransportRegistrationInfo(NFSv3Protocol.NFS_PROGRAM, 3),
            };
            transports = new OncRpcServerTransport[] {
                new OncRpcUdpServerTransport(this, bindAddr ?? IPAddress.Any, port, info, 32768),
                new OncRpcTcpServerTransport(this, bindAddr ?? IPAddress.Any, port, info, 32768)
            };
        }

        public void DispatchOperation(int procedure, XdrDecodingStream xdr, XdrEncodingStream xdr2)
        {
            switch (procedure)
            {
                case 0:
                    {
                        NFSPROC3_NULL();
                        break;
                    }
                case 1:
                    {
                        GetAttributeArguments args = new GetAttributeArguments();
                        args.XdrDecode(xdr);

                        ResultObject<GetAttributeAccessOK, GetAttributeAccessOK> result =
                            NFSPROC3_GETATTR(args);
                        result.XdrEncode(xdr2);

                        break;
                    }
                case 2:
                    {
                        SetAttributeArguments args = new SetAttributeArguments();
                        args.XdrDecode(xdr);

                        ResultObject<SetAttributeAccessOK, SetAttributeAccessFAIL> result =
                            NFSPROC3_SETATTR(args);
                        result.XdrEncode(xdr2);

                        break;
                    }
                // ... other cases ...
                default:
                    throw new Exception($"Unknown procedure: {procedure}");
            }
        }

        public abstract void NFSPROC3_NULL();
        public abstract ResultObject<GetAttributeAccessOK, GetAttributeAccessOK> NFSPROC3_GETATTR(GetAttributeArguments arg1);
        public abstract ResultObject<SetAttributeAccessOK, SetAttributeAccessFAIL> NFSPROC3_SETATTR(SetAttributeArguments arg1);
        public abstract ResultObject<ItemOperationAccessResultOK, ItemOperationAccessResultFAIL> NFSPROC3_LOOKUP(ItemOperationArguments arg1);
        public abstract ResultObject<AccessAccessOK, AccessAccessFAIL> NFSPROC3_ACCESS(AccessArguments arg1);
        public abstract ResultObject<ReadLinkAccessOK, ReadLinkAccessFAIL> NFSPROC3_READLINK(ReadLinkArguments arg1);
        public abstract ResultObject<ReadAccessOK, ReadAccessFAIL> NFSPROC3_READ(ReadArguments arg1);
        public abstract ResultObject<WriteAccessOK, WriteAccessFAIL> NFSPROC3_WRITE(WriteArguments arg1);
        public abstract ResultObject<MakeFileAccessOK, MakeFileAccessFAIL> NFSPROC3_CREATE(MakeFileArguments arg1);
        public abstract ResultObject<MakeFolderAccessOK, MakeFolderAccessFAIL> NFSPROC3_MKDIR(MakeFolderArguments arg1);
        public abstract ResultObject<SymlinkAccessOK, SymlinkAccessFAIL> NFSPROC3_SYMLINK(SymlinkArguments arg1);
        public abstract ResultObject<MakeNodeAccessOK, MakeNodeAccessFAIL> NFSPROC3_MKNOD(MakeNodeArguments arg1);
        public abstract ResultObject<RemoveAccessOK, RemoveAccessFAIL> NFSPROC3_REMOVE(ItemOperationArguments arg1);
        public abstract ResultObject<RemoveAccessOK, RemoveAccessFAIL> NFSPROC3_RMDIR(ItemOperationArguments arg1);
        public abstract ResultObject<RenameAccessOK, RenameAccessFAIL> NFSPROC3_RENAME(RenameArguments arg1);
        public abstract ResultObject<LinkAccessOK, LinkAccessFAIL> NFSPROC3_LINK(LinkArguments arg1);
        public abstract ResultObject<ReadFolderAccessResultOK, ReadFolderAccessResultFAIL> NFSPROC3_READDIR(ReadFolderArguments arg1);
        public abstract ResultObject<ExtendedReadFolderAccessOK, ExtendedReadFolderAccessFAIL> NFSPROC3_READDIRPLUS(ExtendedReadFolderArguments arg1);
        public abstract ResultObject<FSStatisticsAccessOK, FSStatisticsAccessFAIL> NFSPROC3_FSSTAT(FSStatisticsArguments arg1);
        public abstract ResultObject<FSInfoAccessOK, FSInfoAccessFAIL> NFSPROC3_FSINFO(FSInfoArguments arg1);
        public abstract ResultObject<PathConfigurationAccessOK, PathConfigurationAccessFAIL> NFSPROC3_PATHCONF(PathConfigurationArguments arg1);
        public abstract ResultObject<CommitAccessOK, CommitAccessFAIL> NFSPROC3_COMMIT(CommitArguments arg1);
    }
    // End of NFSv3ProtocolServerStub.cs
}